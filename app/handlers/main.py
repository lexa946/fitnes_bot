import logging

from aiogram.filters import CommandStart, Command
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import F

from app.dao.main import UserDAO, AppointmentDAO, ScheduleWorkDAO
from app.utils import get_user
from app.keyboards.main import gender_keyboard, registration_apply_keyboard, main_menu_client_keyboard, \
    settings_keyboard, change_FIO_confirmation_keyboard, choice_trainer_keyboard, my_appointments_keyboard, \
    back_to_main_menu, choice_remove_appointments_keyboard
from app.forms import RegistrationForm, ChangeFIOForm
from app.models import User, Appointment
from app.config import settings

router = Router()

@router.message(Command("help"))
async def help(message: Message):
    await message.answer("–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, "
                         "—Ç–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å /menu –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è. "
                         "–ï—Å–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Ç–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @PozharAlex "
                         "–∏ –æ–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏–≤–æ–¥–∏–º—ã—Ö –∫ –æ—à–∏–±–∫–∞–º —Ä–∞–±–æ—Ç—ã. "
                         "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.")

async def choice_trainer(callback: CallbackQuery):
    trainers = await UserDAO.find_all(is_trainer=True)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞", reply_markup=choice_trainer_keyboard(trainers))


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    client = await UserDAO.find_one_or_none(user_id=message.from_user.id)
    if client:
        await message.reply("–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!")
    else:
        await state.set_state(RegistrationForm.FIO)
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç üëãüòä\n"
                            f"–¢—ã —É –Ω–∞—Å –Ω–æ–≤–µ–Ω—å–∫–∏–π, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.\n"
                            f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û:")


@router.callback_query(F.data == "register_edit")
async def register_edit(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationForm.FIO)
    await callback.message.edit_text(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û:")


@router.message(RegistrationForm.FIO)
async def register_FIO(message: Message, state: FSMContext):
    await state.update_data(FIO=message.text)
    await state.set_state(RegistrationForm.gender)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=gender_keyboard())


@router.callback_query(F.data.in_(["male", "female"]))
async def register_gender(callback: CallbackQuery, state: FSMContext):
    form = await state.update_data(gender=callback.data)
    await callback.message.edit_text(f"–í–∞—à–∞ —Ñ–æ—Ä–º–∞:\n–§–ò–û: {form['FIO']}\n"
                                     f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if form['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
                                     reply_markup=registration_apply_keyboard())


@router.callback_query(F.data == "registration_apply")
async def register_apply(callback: CallbackQuery, state: FSMContext):
    form = await state.get_data()
    await UserDAO.add(
        user_id=callback.from_user.id,
        username=form['FIO'],
        gender=form['gender'],
    )
    await choice_trainer(callback)


@router.callback_query(F.data == "main_menu")
@router.message(Command("menu"))
@get_user
async def main_menu(callback: CallbackQuery | Message, user: User, state: FSMContext):
    await state.clear()

    menu = main_menu_client_keyboard(is_admin=user.is_admin, is_trainer=user.is_trainer)
    if isinstance(callback, CallbackQuery):
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=menu)
    else:
        await callback.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=menu)


@router.callback_query(F.data == "settings")
@get_user
async def settings_handler(callback: CallbackQuery, user: User):
    message_text = (f"ü™™ –ü—Ä–æ—Ñ–∏–ª—å\n\t"
                    f"{'üßë' if user.gender.value == '–ú—É–∂—Å–∫–æ–π' else 'üë©'} –§–ò–û: {user.username}\n\t")
    if user.is_trainer:
        schedule_work = await ScheduleWorkDAO.find_one_or_none(trainer_id=user.user_id)
        if not schedule_work:
            schedule_work = await ScheduleWorkDAO.add(trainer_id=user.user_id)

        if schedule_work.hours != [0] :
            work_hours_str = schedule_work.hours
        else:
            work_hours_str = "–ª—é–±—ã–µ"

        if schedule_work.free_days != [0]:
            free_days_str = ", ".join(settings.WEEKDAY_TO_STR[day_num] for day_num in schedule_work.free_days)
        else:
            free_days_str = "–Ω–µ—Ç"

        if schedule_work.max_user_per_hour != 0:
            user_per_hour = schedule_work.max_user_per_hour
        else:
            user_per_hour = "–ª—é–±–æ–µ"

        message_text += (f"üïë –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {work_hours_str}\n\t"
                         f"üèÉ‚Äç‚ôÇÔ∏è –ö–æ–ª-–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —á–∞—Å: {user_per_hour}\n\t"
                         f"üîÑ –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {'–í–∫–ª' if schedule_work.auto_confirmation else '–í—ã–∫–ª'}\n\t"
                         f"üÜìÔ∏è –í—ã—Ö–æ–¥–Ω—ã–µ: {free_days_str}\n\t")
    else:
        trainer = await UserDAO.find_one_or_none(user_id=user.trainer_id)
        if trainer:
            message_text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–µ—Ä: {trainer.username}\n\t"
        else:
            message_text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–µ—Ä: –Ω–µ –≤—ã–±—Ä–∞–Ω\n\t"

    await callback.message.edit_text(message_text, reply_markup=settings_keyboard(user.is_trainer))


@router.callback_query(F.data == "change_FIO")
async def change_FIO(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChangeFIOForm.FIO)
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:", reply_markup=back_to_main_menu())


@router.message(ChangeFIOForm.FIO)
async def confirm_change_FIO(message: Message, state: FSMContext):
    await state.update_data(FIO=message.text)
    await message.answer(f"–í–∞—à–µ –Ω–æ–≤–æ–µ –§–ò–û: {message.text}", reply_markup=change_FIO_confirmation_keyboard())


@router.callback_query(F.data == "change_FIO_confirmation")
@get_user
async def apply_change_FIO(callback: CallbackQuery, user: User, state: FSMContext):
    form = await state.get_data()
    await callback.message.edit_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –§–ò–û: {form['FIO']}",
                                     reply_markup=main_menu_client_keyboard(is_admin=user.is_admin,
                                                                            is_trainer=user.is_trainer))
    await UserDAO.patch(user, username=form['FIO'])
    await state.clear()


@router.callback_query(F.data == "my_appointments")
@get_user
async def my_appointments(callback: CallbackQuery, user: User):
    appointments_filter = {
        "trainer_id" if user.is_trainer else "user_id": user.user_id,
        "is_active": True
    }
    appointments: list[Appointment] = await AppointmentDAO.find_all(**appointments_filter)
    appointments.sort(key=lambda ap: ap.start_at)

    if appointments:
        message_text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n"
        for i, appointment in enumerate(appointments):
            trainer: User = await UserDAO.find_one_or_none(user_id=appointment.trainer_id)

            if user.is_trainer:
                client = await UserDAO.find_one_or_none(user_id=appointment.user_id)
                username = client.username
            else:
                username = trainer.username

            message_text += (f"{i + 1}. {appointment.start_at_str} {username} "
                             f"{'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ' if appointment.is_confirmation else '–û–∂–∏–¥–∞–Ω–∏–µ ‚è≥'}\n")
        await callback.message.edit_text(message_text, reply_markup=my_appointments_keyboard())
    else:
        message_text = "–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–ø–∏—Å–µ–π."
        await callback.message.edit_text(message_text, reply_markup=back_to_main_menu())


@router.callback_query(F.data == "choice_remove_appointment")
@get_user
async def choice_remove_appointment(callback: CallbackQuery, user: User):
    appointments_filter = {
        "trainer_id" if user.is_trainer else "user_id": user.user_id,
        "is_active": True
    }
    appointments: list[Appointment] = await AppointmentDAO.find_all(**appointments_filter)
    appointments.sort(key=lambda ap: ap.start_at)

    if not appointments:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π!")
    else:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                         reply_markup=choice_remove_appointments_keyboard(
                                             [
                                                 (appointment,
                                                  await UserDAO.find_one_or_none(user_id=appointment.trainer_id),
                                                  ) for appointment in appointments]
                                         ))


@router.callback_query(F.data.startswith("remove_appointment"))
@get_user
async def remove_appointment(callback: CallbackQuery, user: User):
    appointment_id = int(callback.data.split(":")[1])
    appointment = await AppointmentDAO.find_one_or_none(id=appointment_id)

    menu = back_to_main_menu()

    if appointment:
        trainer: User = await UserDAO.find_one_or_none(user_id=appointment.trainer_id)

        if appointment.is_active:
            await AppointmentDAO.patch(appointment, is_active=False)
            await callback.message.edit_text(f"–ó–∞–ø–∏—Å—å - {appointment.start_at_str} {trainer.username} - —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                                             reply_markup=menu)
            if user.is_trainer:
                notification_chat_id = appointment.user_id
                notification_text = f"–¢—Ä–µ–Ω–µ—Ä {trainer.username} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å - {appointment.start_at_str} "
            else:
                notification_chat_id = appointment.trainer_id
                notification_text = f"–ö–ª–∏–µ–Ω—Ç {user.username} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å - {appointment.start_at_str}"
            await callback.bot.send_message(notification_chat_id, notification_text)
        else:
            await callback.message.edit_text(f"–ó–∞–ø–∏—Å—å - {appointment.start_at_str} {trainer.username} - —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                                             reply_markup=menu)
    else:
        await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—É—é –∑–∞–ø—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                                         reply_markup=menu)
