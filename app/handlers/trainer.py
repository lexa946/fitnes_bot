from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.dao.main import AppointmentDAO, UserDAO, ScheduleWorkDAO, TrainingProgramDAO
from app.forms import ChangeSchedule, ChangeFreeDays, Training, ClientComment
from app.keyboards.main import back_to_main_menu, client_list_keyboard, \
    delete_client_confirmation_keyboard, change_schedule_keyboard, change_max_user_per_hour_keyboard, \
    training_client_keyboard, end_set_training_keyboard, \
    client_profile_keyboard, back_to_profile_client_keyboard
from app.models import User
from app.utils import get_user, schedule_pars, get_client_profile
from app.config import settings

router = Router()




@router.callback_query(F.data == "change_schedule")
async def change_schedule(callback: CallbackQuery):
    await callback.message.edit_text("–ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å? ", reply_markup=change_schedule_keyboard())


@router.callback_query(F.data == "change_max_user_per_hour")
async def change_max_user_per_hours(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫: ", reply_markup=change_max_user_per_hour_keyboard())


@router.callback_query(F.data.startswith("change_max_user_per_hour"))
@get_user
async def change_max_user_per_hour_apply(callback: CallbackQuery, user: User):
    max_user_per_hour = int(callback.data.split(":")[1])
    schedule = await ScheduleWorkDAO.find_one_or_none(trainer_id=user.user_id)
    if not schedule:
        schedule = await ScheduleWorkDAO.add(trainer_id=user.user_id)
    await ScheduleWorkDAO.patch(schedule, max_user_per_hour=max_user_per_hour)
    await callback.message.edit_text(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ —á–∞—Å —Ç–µ–ø–µ—Ä—å {max_user_per_hour}",
                                     reply_markup=back_to_main_menu())


@router.callback_query(F.data.startswith("change_free_days"))
async def change_max_user_per_hour_apply(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChangeFreeDays.days)

    message_text = (f"–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä: 3,6,7 - —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å—Ä–µ–¥–∞, —Å—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ.\n"
                    f"–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:\t")
    for key, value in settings.WEEKDAY_TO_STR.items():
        message_text += f"{key} {value};\t"
    message_text += "\n–û—Ç–ø—Ä–∞–≤—å 0 –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö."
    await callback.message.edit_text(message_text, reply_markup=back_to_main_menu())



@router.message(ChangeFreeDays.days)
@get_user
async def set_free_days(message: Message, user: User):
    try:
        free_days = []
        for day_number in message.text.split(","):
            day_number = int(day_number)
            if day_number > 7:
                raise ValueError("–ë–æ–ª—å—à–µ 7")
            free_days.append(day_number)
    except ValueError:
        await message.answer(f"–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–Ω–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:", reply_markup=back_to_main_menu())
        return

    free_days = list(set(free_days))
    free_days.sort()

    schedule = await ScheduleWorkDAO.find_one_or_none(trainer_id=user.user_id)
    await ScheduleWorkDAO.patch(schedule, free_days=free_days)
    message_text = f"–¢–µ–ø–µ—Ä—å –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ - —ç—Ç–æ {', '.join([settings.WEEKDAY_TO_STR[day] for day in free_days])}"
    await message.answer(message_text, reply_markup=back_to_main_menu())



@router.callback_query(F.data == "change_work_hours")
async def change_schedule(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ —á–∞—Å–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å!\n"
                                     "–ü—Ä–∏–º–µ—Ä: 8-12,13-17,18-22\n"
                                     "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–µ –≤—Ä–µ–º—è - –ø—Ä–∏—à–ª–∏—Ç–µ 0\n", reply_markup=back_to_main_menu())
    await state.set_state(ChangeSchedule.hours)


@router.message(ChangeSchedule.hours)
@get_user
async def set_schedule_work_hours(message: Message, user: User):
    try:
        hours = schedule_pars(message.text.strip())
    except (IndexError, ValueError):
        await message.reply("–ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —á–∞—Å—ã, –ª–∏–±–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Å—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:",
                            reply_markup=back_to_main_menu())
        return

    schedule = await ScheduleWorkDAO.find_one_or_none(trainer_id=user.user_id)
    if not schedule:
        await ScheduleWorkDAO.add(
            trainer_id=user.user_id,
            hours=hours
        )
    else:
        await ScheduleWorkDAO.patch(schedule, hours=hours)

    await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=back_to_main_menu())



@router.callback_query(F.data == "change_auto_confirmation")
@get_user
async def change_auto_confirmation(callback: CallbackQuery, user: User):
    schedule = await ScheduleWorkDAO.find_one_or_none(trainer_id=user.user_id)
    if schedule.auto_confirmation:
        message_text = "–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"
    else:
        message_text = "–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ"
    await ScheduleWorkDAO.patch(schedule, auto_confirmation=not schedule.auto_confirmation)

    await callback.message.edit_text(message_text, reply_markup=back_to_main_menu())


@router.callback_query(F.data == "clients_list")
@get_user
async def client_list(callback: CallbackQuery, user: User):
    clients = await UserDAO.find_all(trainer_id=user.user_id)
    if not clients:
        await callback.message.edit_text(f"–£ –≤–∞—Å –Ω–µ—Ç—É –∫–ª–∏–µ–Ω—Ç–æ–≤!", reply_markup=back_to_main_menu())
        return

    message_text = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"
    await callback.message.edit_text(message_text, reply_markup=client_list_keyboard(clients))


@router.callback_query(F.data.startswith("client_profile"))
async def client_profile(callback: CallbackQuery):
    client_id = int(callback.data.split(":")[1])
    client = await UserDAO.find_one_or_none(user_id=client_id)
    if not client:
        await callback.message.edit_text(f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!", reply_markup=back_to_main_menu())
        return
    profile_text = get_client_profile(client)
    await callback.message.edit_text(profile_text, reply_markup=client_profile_keyboard(client_id))


@router.callback_query(F.data.startswith("change_comment_client"))
async def client_add_comment(callback: CallbackQuery, state: FSMContext):
    client_id = int(callback.data.split(":")[1])
    await state.set_state(ClientComment.comment)
    await state.update_data(client_id=client_id)
    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")


@router.message(ClientComment.comment)
async def client_set_comment(message: Message, state: FSMContext):
    form = await state.get_data()
    client = await UserDAO.find_one_or_none(user_id=form['client_id'])
    client = await UserDAO.patch(client, comment=message.text)
    profile_text = get_client_profile(client)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!")
    await message.answer(profile_text, reply_markup=client_profile_keyboard(form['client_id']))
    await state.clear()



@router.callback_query(F.data.startswith("remove_client"))
async def remove_client_confirmation(callback: CallbackQuery):
    client_id = int(callback.data.split(":")[1])
    client = await UserDAO.find_one_or_none(user_id=client_id)
    if not client:
        await callback.message.edit_text("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!",
                                         reply_markup=back_to_main_menu())
        return

    await callback.message.edit_text(f"–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞:\n{client.username}",
                                     reply_markup=delete_client_confirmation_keyboard(client))


@router.callback_query(F.data.startswith("apply_remove_client"))
@get_user
async def remove_client_confirmation(callback: CallbackQuery, user: User):
    client_id = int(callback.data.split(":")[1])
    client = await UserDAO.find_one_or_none(user_id=client_id)
    await UserDAO.patch(client, trainer_id=None)
    client_appointments = await AppointmentDAO.find_all(user_id=client.user_id, trainer_id=user.user_id)
    await AppointmentDAO.many_patch(client_appointments, is_active=False)
    await callback.message.edit_text(f"–ö–ª–∏–µ–Ω—Ç {client.username} —É–¥–∞–ª–µ–Ω!\n–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∞–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã.",
                                     reply_markup=back_to_main_menu())
    await callback.bot.send_message(client.user_id, "–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞!")


@router.callback_query(F.data.startswith("trainer_confirm_appointment"))
@router.callback_query(F.data.startswith("trainer_not_confirm_appointment"))
async def trainer_confirm_appointment(callback: CallbackQuery):
    appointment_id = int(callback.data.split(":")[1])
    appointment = await AppointmentDAO.find_one_or_none(id=appointment_id)

    if not appointment.is_active:
        await callback.message.edit_text("–ó–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ü§∑‚Äç‚ôÇÔ∏è")
        return

    if callback.data.startswith("trainer_confirm_appointment"):
        await AppointmentDAO.patch(appointment, is_confirmation=True)
        message_text = f"‚úÖ –¢—Ä–µ–Ω–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É {appointment.start_at_str}"
    else:
        await AppointmentDAO.patch(appointment, is_active=False)
        message_text = f"‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É {appointment.start_at_str}"
    await callback.bot.send_message(appointment.user_id, message_text)
    await callback.message.delete()


@router.callback_query(F.data.startswith("program_training_client"))
async def program_training_client(callback: CallbackQuery):
    client_id = int(callback.data.split(":")[1])

    program = await TrainingProgramDAO.find_one_or_none(user_id=client_id)

    if not program:
        program = await TrainingProgramDAO.add(user_id=client_id)
    if not program.individual:
        await callback.message.edit_text(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –µ—â–µ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω–∞",
                                         reply_markup=training_client_keyboard(client_id, []))
        return
    messages = []
    for text in program.individual:
        new_message = await callback.message.answer(text)
        messages.append(new_message)

    await messages[-1].edit_text(messages[-1].text, reply_markup=training_client_keyboard(
        client_id,
        [str(message.message_id) for message in messages]
    ))

@router.callback_query(F.data.startswith("close_program"))
async def close_program(callback: CallbackQuery):
    message_ids = callback.data.split(":")[1].split(",")
    message_ids = [int(message_id) for message_id in message_ids]
    await callback.bot.delete_messages(callback.from_user.id, message_ids)


@router.callback_query(F.data.startswith("set_training"))
async def set_training(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Training.program)

    client_messages_id = callback.data.split(":")[1]
    client_id, messages_id = client_messages_id.split(";")
    client_id = int(client_id)
    if messages_id:
        messages_id = [int(message_id) for message_id in messages_id.split(",")]
        await callback.bot.delete_messages(callback.from_user.id, messages_id)

    client = await UserDAO.find_one_or_none(user_id=client_id)


    # await callback.message.delete()

    await callback.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è {client.username}.\n\n"
                                     f"–ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:\n"
                                     f"1. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π. "
                                     f"–û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Ç–∞–∫–æ–π –∂–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–∞–∫ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.\n"
                                     f"2. –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π. "
                                     f"–ï—Å–ª–∏ –≤—ã –≤—Å—Ç–∞–≤–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏, —Ç–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                                     f"3. –ü–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å \"üèÅ –ö–æ–Ω–µ—Ü\". "
                                     f"–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", reply_markup=end_set_training_keyboard())
    await state.update_data(client_id=client_id)
    await state.update_data(messages=[])

@router.message(Training.program)
async def set_training_message(message: Message, state: FSMContext):
    form = await state.get_data()

    if message.text != "üèÅ –ö–æ–Ω–µ—Ü":

        messages_text = message.text.split("\n\n")
        for message_text in messages_text:
            form['messages'].append(message_text.strip())
        await state.update_data(messages=form['messages'])
        return

    program = await TrainingProgramDAO.find_one_or_none(user_id=form['client_id'])
    await TrainingProgramDAO.patch(program, individual=form['messages'])
    await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=back_to_profile_client_keyboard(form['client_id']))
    await state.clear()
